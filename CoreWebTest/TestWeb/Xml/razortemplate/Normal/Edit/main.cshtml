@inherits YJC.Toolkit.Razor.ToolkitTemplatePage<TModel>
@using System.Data;
@using System.Collections.Generic;
@using YJC.Toolkit.MetaData;
@using YJC.Toolkit.Data;
@using YJC.Toolkit.Razor;
@using YJC.Toolkit.Sys;
@using YJC.Toolkit.Web;
@{
    IEditModel model = CreateModel<IEditModel>(Model);
    NormalEditData pageData = ViewBag.PageData;
    HtmlAttribute attribute = pageData.DialogMode ? new HtmlAttribute("data-dialog-action", "close")
        : new HtmlAttribute("data-url", model.RetUrl);
    HtmlAttribute retAttr = new HtmlAttribute("data-action", "return");
}

@section DefaultButtons
    {
    <div class="text-center clearfix">
        @Raw(BootcssCommonUtil.Button(pageData.SaveButtonCaption, "btn-submit auto-disabled", BootcssButton.Info, false))
        @Raw(BootcssCommonUtil.Button(pageData.CancelCaption, "m10", BootcssButton.Default, false, attribute, retAttr))
    </div>
}
@functions
{
    string GetJson(INormalTableData table)
    {
        var json = string.Format("{{\"Tables\":[{0}]}}", table.JsonFields);
        return StringUtil.EscapeHtmlAttribute(json);
    }
    IEnumerable<IGrouping<GroupSection, Tk5FieldInfoEx>> FormatFields(IEnumerable<Tk5FieldInfoEx> fields, List<GroupSection> groups)
    {

        if (groups == null || groups.Count == 0)
        {
            return null;
        }
        var result = from grp in groups
                     from field in fields
                     let order = field.InternalControl?.Order
                     where order != null && order >= grp.Order && order < grp.EndOrder
                     group field by grp;
        return result;
    }
}
@{
    INormalMetaData metaData = ViewBag.MetaData;
    INormalTableData table = metaData.TableData;
    IEnumerable<Tk5FieldInfoEx> hiddenFields = table.HiddenList;
    IEnumerable<Tk5FieldInfoEx> normalFields = table.DataList;
    bool showCaption = pageData.ShowCaption;
    bool hasEditKey = table.HasEditKey;
    string dataClass = showCaption ? string.Empty : "class=\"nocaption\"";
    IFieldValueProvider provider = model.CreateMainObjectProvider(metaData.TableData);

    var groupFields = FormatFields(normalFields, pageData.ControlGroupList);
}
<form action="@ViewBag.PageData.FormAction" method="POST" id="PostForm" class="tk-dataform clearfix mb15" role="form" data-check="true" data-post="@Raw(GetJson(table))">
    <div id="@table.TableName" class="@(HtmlCommonUtil.MergeClass("tk-datatable table-row bg-white-panel", "column" + table.ColumnCount.ToString()))">
        <div class="hide">
            @foreach (Tk5FieldInfoEx field in hiddenFields)
            {
                @Raw(RenderHidden(provider, field, true))
            }
            @if (hasEditKey)
            {
                @Raw(HtmlCommonUtil.HiddenKey(table, provider, true))
            }
        </div>
        <div class="p10 pull-left w100p">
            @if (groupFields == null)
            {
                @foreach (Tk5FieldInfoEx field in normalFields)
                {
                    var fieldString = RenderFieldItem(provider, field);
                    if (fieldString != null)
                    {
                        @Raw(fieldString.Value)
                    }
                    else
                    {
                        <div class="@HtmlCommonUtil.MergeClass("tk-column form-group", field.LayoutClass())">
                            <dl @dataClass>
                                @if (showCaption)
                                {
                                    <dt>@field.DisplayName</dt>
                                }
                                <dd>
                                    <span class="tk-control">
                                        @Raw(field.ControlHtml(provider, true))
                                    </span>
                                </dd>
                            </dl>
                        </div>
                    }
                }
            }
            else
            {
                @foreach (var group in groupFields)
                {
                    string collapse = group.Key.IsCollaspe ? string.Empty : "in";
                    string rotate = group.Key.IsCollaspe ? "rotate-180" : string.Empty;
                    <div class="panel panel-default">
                        <div class="panel-heading panel-collapse-trigger" role="tab" id="headingTwo">
                            <h4 class="panel-title">@group.Key.Caption</h4>
                            <i class="trigger-icon fa icon-chevron-down @rotate"></i>
                        </div>
                        <div class="panel-collapse collapse @collapse">
                            <div class="panel-body">
                                @foreach (Tk5FieldInfoEx field in group)
                                {
                                    var fieldString = RenderFieldItem(provider, field);
                                    if (fieldString != null)
                                    {
                                        @Raw(fieldString.Value)
                                    }
                                    else
                                    {
                                        <div class="@HtmlCommonUtil.MergeClass("tk-column form-group", field.LayoutClass())">
                                            <dl @dataClass>
                                                @if (showCaption)
                                                {
                                                    <dt>@field.DisplayName</dt>
                                                }
                                                <dd>
                                                    <span class="tk-control">
                                                        @Raw(field.ControlHtml(provider, true))
                                                    </span>
                                                </dd>
                                            </dl>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</form>
@RenderSectionOrDefault("ModuleButtons", "DefaultButtons")