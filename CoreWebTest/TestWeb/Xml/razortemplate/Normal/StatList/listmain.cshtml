@inherits YJC.Toolkit.Razor.ListTemplatePage<TModel>
@using System.Data;
@using System.Text;
@using System.Web;
@using YJC.Toolkit.Data;
@using YJC.Toolkit.MetaData;
@using YJC.Toolkit.Razor;
@using YJC.Toolkit.Sys;
@using YJC.Toolkit.Web;
@using YJC.Toolkit.Right;
@{
    IListModel model = CreateModel<IListModel>(Model);
    CountInfo count = model.PageInfo;
    IListMetaData metaData = ViewBag.MetaData;
    string url = model.DecoderSelfUrl;
    ListSortInfo sort = model.SortInfo;
    string condition = HttpUtility.UrlEncode(sort.SqlCon);
    IEnumerable<IFieldInfoEx> fields = metaData.TableData.DataList;
    NormalStatListData pageData = (NormalStatListData)ViewBag.PageData;
    FieldListOrder orderInfo = FieldListOrder.FromJson(sort.JsonOrder);
    //int sortField = sort.SortField;
    IEnumerable<IOperatorFieldProvider> rows = model.CreateDataRowsProvider(metaData);
    bool canMultiSelect = false;
    IFieldInfoEx keyField = null;
    if (pageData.ShowMultiSelect)
    {
        var key1 = from item in metaData.TableData.DataList
                   where item.IsKey
                   select item;
        var key2 = from item in metaData.TableData.HiddenList
                   where item.IsKey
                   select item;
        var key = key1.Union(key2).Distinct().ToList();
        if (key.Count == 1)
        {
            canMultiSelect = true;
            keyField = key[0];
        }
    }
}
@functions {
    string OperatorWidth(int width)
    {
        if (width > 0)
            return "width=\"" + width + "\"";
        return string.Empty;
    }

    string CreateColAttrs(IFieldInfoEx field, FieldListOrder orderInfo)
    {
        Tk5FieldInfoEx tk5Field = field.Convert<Tk5FieldInfoEx>();
        HtmlAttributeBuilder builder = new HtmlAttributeBuilder();
        if (tk5Field.ListDetail != null && tk5Field.ListDetail.ListWidth > 0)
            builder.Add("width", tk5Field.ListDetail.ListWidth);
        if (orderInfo.Contains(field.NickName))
            builder.Add((HtmlAttribute)"selected");
        return builder.CreateAttribute();
    }

    string CreateHeadAttrs(IFieldInfoEx field, ListSortInfo sort, FieldListOrder orderInfo)
    {
        HtmlAttributeBuilder builder = new HtmlAttributeBuilder();
        Tk5FieldInfoEx tk5Field = field.Convert<Tk5FieldInfoEx>();
        Alignment titleAlign = tk5Field.Extension != null ? tk5Field.Extension.TitleAlign : Alignment.Left;
        if (tk5Field.DataType == TkDataType.Text || (tk5Field.ListDetail != null && tk5Field.ListDetail.TextHead))
        {
            builder.Add("class", HtmlCommonUtil.MergeClass("text-nowrap", titleAlign.AlginClass()));
        }
        else
        {
            //builder.Add("data-sort", index.ToString());
            string order = "ASC";
            string sortClass = string.Empty;
            //if (index == sortField)
            //{
            //    order = order == "DESC" ? "ASC" : "DESC";
            //    sortClass = "sort-" + order;
            //}
            if (orderInfo.Contains(field.NickName))
            {
                var fieldOrder = orderInfo.FieldList[field.NickName];
                order = fieldOrder.Order == DbOrder.Desc ? "ASC" : "DESC";
                sortClass = "sort-" + order;
            }
            builder.Add("data-order", order);
            builder.Add("class", HtmlCommonUtil.MergeClass("text-nowrap", sortClass.ToLower(), titleAlign.AlginClass()));
            builder.Add("data-name", field.NickName);
        }

        return builder.CreateAttribute();
    }

    string GetFieldAlign(Tk5FieldInfoEx field)
    {
        string alignClass = string.Empty;
        Alignment align = Alignment.Left;
        if (field.Extension != null)
            align = field.Extension.Align;
        alignClass = align.AlginClass();
        return alignClass;
    }

    string DisplayTotalItem(Tk5FieldInfoEx field, IFieldValueProvider provider, NormalStatListData pageData)
    {
        var fieldValue = provider[field.NickName];
        var display = pageData.GetDisplay(field.NickName);
        if (display == null)
            display = field.ListDetail.ListDisplay;
        return DisplayUtil.GetDisplayString(display, fieldValue, field, provider);
    }

    string DisplayTotal(IEnumerable<IFieldInfoEx> fields, IListModel model, NormalStatListData pageData, string tableName, string caption)
    {
        var provider = model.CreateProvider(tableName);
        if (provider.IsEmpty)
            return string.Empty;

        StringBuilder builder = new StringBuilder();
        builder.Append("<tr>");
        int span = 1;
        if (pageData.OperatorPosition == YJC.Toolkit.Razor.OperatorPosition.Left)
            ++span;
        builder.AppendFormat("<td colspan='{0}'>{1}</td>", span, caption);
        int index = 0;
        foreach (var field in fields)
        {
            if (index++ == 0)
                continue; // 第一列忽略，已经写了标题
            Tk5FieldInfoEx fieldInfo = field.Convert<Tk5FieldInfoEx>();
            builder.AppendFormat("<td class='{0}'>", GetFieldAlign(fieldInfo));
            builder.Append(DisplayTotalItem(fieldInfo, provider, pageData));
            builder.Append("</td>");
        }
        builder.Append("</tr>");
        return builder.ToString();
    }
}
@section DefaultListHeader {
    <tr>
        @if (canMultiSelect)
        {
            <th class="text-center text-nowrap">
                <div class="checkbox">
                    <input type="checkbox" id="chkAll" autocomplete="off" />
                    <label class="checkbox-label"></label>
                </div>
            </th>
        }
        @if (pageData.OperatorPosition == YJC.Toolkit.Razor.OperatorPosition.Left)
        {
            <th class="text-center text-nowrap">
                <div>@pageData.OperationCaption</div>
            </th>
        }
        @foreach (IFieldInfoEx field in fields)
        {
            string title = field.DisplayName;
            if (pageData.ShowHintInHead)
            {
                Tk5FieldInfoEx tk5Field = field as Tk5FieldInfoEx;
                if (tk5Field != null && !string.IsNullOrEmpty(tk5Field.Hint))
                {
                    title += "(" + tk5Field.Hint + ")";
                }
            }
            <th @Raw(CreateHeadAttrs(field, sort, orderInfo))>
                <div>@title</div>
            </th>
        }
        @if (pageData.OperatorPosition == YJC.Toolkit.Razor.OperatorPosition.Right)
        {
            <th class="text-center text-nowrap">
                <div>@pageData.OperationCaption</div>
            </th>
        }
    </tr>
}
@section DefaultListWidth {
    @if (canMultiSelect)
    {
        <col width="30" />
    }
    @if (pageData.OperatorPosition == YJC.Toolkit.Razor.OperatorPosition.Left)
    {
        <col @Raw(OperatorWidth(pageData.OperatorWidth)) />
    }
    @foreach (IFieldInfoEx field in fields)
    {
        <col @Raw(CreateColAttrs(field, orderInfo)) />
    }
    @if (pageData.OperatorPosition == YJC.Toolkit.Razor.OperatorPosition.Right)
    {
        <col @Raw(OperatorWidth(pageData.OperatorWidth)) />
    }
}
@section DefaultTabSheet {
    @if (model.TabSheets != null)
    {
        <ul class="@HtmlCommonUtil.MergeClass("nav", BootcssCommonUtil.GetTabClass(pageData.TabDisplayType))" role="tablist">
            @Raw(BootcssCommonUtil.CreateTabSheets(model.TabSheets))
        </ul>
    }
}
@RenderSectionOrDefault("TabSheet", "DefaultTabSheet")
<table class="@HtmlCommonUtil.MergeClass("list-table table", pageData.Display.TableDisplayClass())">
    <colgroup>
        @RenderSectionOrDefault("ListWidth", "DefaultListWidth")
    </colgroup>
    @if (pageData.ShowListHeader)
    {
        <thead>
            @RenderSectionOrDefault("ListHeader", "DefaultListHeader")
        </thead>
    }
    <tbody id="pageList" data-totalcount="@count.TotalCount" data-totalpage="@count.TotalPage" data-page="@count.CurrentPage" data-url="@url" data-condition="@condition" data-tab="@HtmlCommonUtil.GetSelectedTab(model.TabSheets)" data-source="@(model.Source)" data-tabcount="@(pageData.ShowTabCount ? 1 : 0)" data-jsonorder="@Raw(StringUtil.EscapeHtmlAttribute(sort.JsonOrder))">
        @if (pageData.TotalPosition == DataDirection.Head)
        {
            @DisplayTotal(fields, model, pageData, "_Total", pageData.TotalCaption)
        }
        @if (pageData.SubTotalPosition == DataDirection.Head)
        {
            @DisplayTotal(fields, model, pageData, "_SubTotal", pageData.SubTotalCaption)
        }
        @foreach (var provider in rows)
        {
            var rowString = RenderRow(provider);
            if (rowString != null && !string.IsNullOrEmpty(rowString.Value))
            {
                @Raw(rowString.Value)
            }
            else
            {
                <tr>
                    @if (canMultiSelect)
                    {
                        string value = provider.GetValue(keyField.NickName);
                        <td class="text-nowrap text-center">
                            <div class="checkbox">
                                <input type="checkbox" name="chbList" class="list-checkbox" data-value="@value" value="@value" />
                                <label class="checkbox-label"></label>
                            </div>
                        </td>
                    }
                    @if (pageData.OperatorPosition == YJC.Toolkit.Razor.OperatorPosition.Left)
                    {
                        <td class="text-nowrap text-center">@Raw(BootcssUtil.CreateRowOperators(model.RowOperators, provider, pageData.RowOperatorStyle))</td>
                    }
                    @foreach (IFieldInfoEx field in fields)
                    {
                        Tk5FieldInfoEx fieldInfo = field.Convert<Tk5FieldInfoEx>();
                        var fieldString = RenderFieldItem(provider, fieldInfo);
                        if (fieldString == null)
                        {
                            <td class="@GetFieldAlign(fieldInfo)">@Raw(fieldInfo.DisplayValue(provider))</td>
                        }
                        else
                        {
                            @Raw(fieldString.Value)
                        }
                    }
                    @if (pageData.OperatorPosition == YJC.Toolkit.Razor.OperatorPosition.Right)
                    {
                        <td class="text-nowrap text-center">@Raw(BootcssUtil.CreateRowOperators(model.RowOperators, provider, pageData.RowOperatorStyle))</td>
                    }
                </tr>
            }
        }
        @if (pageData.SubTotalPosition == DataDirection.Foot)
        {
            @DisplayTotal(fields, model, pageData, "_SubTotal", pageData.SubTotalCaption)
        }
        @if (pageData.TotalPosition == DataDirection.Foot)
        {
            @DisplayTotal(fields, model, pageData, "_Total", pageData.TotalCaption)
        }
    </tbody>
</table>
@if (count.TotalCount == 0)
{
    <div class="p30">@pageData.NoDataCaption</div>
}
else
{
    @if (@pageData.ShowPage)
    {
        @RenderPart("@pagenumber.cshtml", Model)
    }
}