@inherits YJC.Toolkit.Razor.MultiEditTemplatePage<TModel>
@using System.Data;
@using System.Linq;
@using System.Text;
@using System.Collections.Generic;
@using Microsoft.AspNetCore.Html;
@using YJC.Toolkit.MetaData;
@using YJC.Toolkit.Data;
@using YJC.Toolkit.Razor;
@using YJC.Toolkit.Sys;
@using YJC.Toolkit.Web;
@{
    NormalMultiDetailData pageData = ViewBag.PageData;
    INormalTableData tableData = ViewBag.MetaData;
    int index = ViewBag.Index;
    IEnumerable<IFieldInfoEx> fields = tableData.DataList;
    IEditModel model = (IEditModel)Model;
    IEnumerable<IFieldValueProvider> rows = model.CreateDataRowsProvider(tableData);
}
@functions {
    string CreateColAttrs(IFieldInfoEx field)
    {
        Tk5FieldInfoEx tk5Field = field.Convert<Tk5FieldInfoEx>();
        if (tk5Field.ListDetail != null && tk5Field.ListDetail.ListWidth > 0)
        {
            HtmlAttributeBuilder builder = new HtmlAttributeBuilder();
            builder.Add("width", tk5Field.ListDetail.ListWidth);
            return builder.CreateAttribute();
        }
        return string.Empty;
    }

    string CreateHeadAttrs(IFieldInfoEx field)
    {
        HtmlAttributeBuilder builder = new HtmlAttributeBuilder();
        Tk5FieldInfoEx tk5Field = field.Convert<Tk5FieldInfoEx>();
        Alignment titleAlign = tk5Field.Extension != null ? tk5Field.Extension.TitleAlign : Alignment.Left;
        builder.Add("class", HtmlCommonUtil.MergeClass("text-nowrap", titleAlign.AlginClass()));
        return builder.CreateAttribute();
    }
}
@section DefaultListHeader {
    <tr>
        @foreach (IFieldInfoEx field in fields)
        {
            <th @CreateHeadAttrs(field)>
                <div>@field.DisplayName</div>
            </th>
        }
    </tr>
}
@section DefaultListWidth {
    @foreach (IFieldInfoEx field in fields)
    {
        <col @Raw(CreateColAttrs(field)) />
    }
}
<div id="@tableData.TableName" data-loaded="true" class="hide" data-index="@index">
    <table class="list-table table">
        <colgroup>
            @RenderSection("DefaultListWidth")
        </colgroup>
        <thead>
            @RenderSection("DefaultListHeader")
        </thead>
        <tbody>
            @foreach (var provider in rows)
            {
                <tr>
                    @foreach (IFieldInfoEx field in fields)
                    {
                        Tk5FieldInfoEx fieldInfo = field.Convert<Tk5FieldInfoEx>();
                        string alignClass = string.Empty;
                        Alignment align = Alignment.Left;
                        if (fieldInfo.Extension != null)
                        {
                            align = fieldInfo.Extension.Align;
                        }
                        alignClass = align.AlginClass();
                        <td class="@alignClass">@Raw(fieldInfo.DisplayValue(provider))</td>

                    }
                </tr>
            }
        </tbody>
    </table>
</div>