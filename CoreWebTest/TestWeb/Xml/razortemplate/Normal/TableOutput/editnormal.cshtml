@inherits YJC.Toolkit.Razor.MultiEditTemplatePage<TModel>
@using System.Data;
@using System.Linq;
@using System.Text;
@using System.Collections.Generic;
@using Microsoft.AspNetCore.Html;
@using YJC.Toolkit.MetaData;
@using YJC.Toolkit.Data;
@using YJC.Toolkit.Razor;
@using YJC.Toolkit.Sys;
@using YJC.Toolkit.Web;
@{
    IMultiEditModel model = (IMultiEditModel)Model;
    NormalMultiEditData pageData = ViewBag.PageData;
    INormalTableData tableData = ViewBag.MetaData;
    IFieldValueProvider provider = model.CreateMainObjectProvider(tableData);
    (int ColumnCount, int dummy) customData = ViewBag.CustomData;
    bool showCaption = pageData.ShowCaption;
    string dataClass = showCaption ? string.Empty : "class=\"nocaption\"";
}
@functions
{
    string GetJsHandler(string tableName)
    {
        SingleTableEditData editData = GetTableData(tableName);
        if (editData == null)
            return string.Empty;
        if (string.IsNullOrEmpty(editData.OnRowAdded) && string.IsNullOrEmpty(editData.OnRowDeleted))
            return string.Empty;
        StringBuilder builder = new StringBuilder();
        if (!string.IsNullOrEmpty(editData.OnRowAdded))
            builder.AppendFormat(" data-rowadded=\"{0}\"", editData.OnRowAdded);
        if (!string.IsNullOrEmpty(editData.OnRowDeleted))
            builder.AppendFormat(" data-rowdeleted=\"{0}\"", editData.OnRowDeleted);

        return builder.ToString();
    }
    IEnumerable<IGrouping<GroupSection, Tk5FieldInfoEx>> FormatFields(IEnumerable<Tk5FieldInfoEx> fields, List<GroupSection> groups)
    {

        if (groups == null || groups.Count == 0)
        {
            return null;
        }
        var result = from grp in groups
                     from field in fields
                     let order = field.InternalControl?.Order
                     where order != null && order >= grp.Order && order < grp.EndOrder
                     group field by grp;
        return result;
    }
}
<div class="panel panel-info tk-datatable" id="@tableData.TableName" @GetJsHandler(tableData.TableName)>
    <div class="panel-heading">
        <h3 class="panel-title">@tableData.TableDesc</h3>
    </div>
    @{
        IEnumerable<Tk5FieldInfoEx> hiddenFields = tableData.HiddenList;
        IEnumerable<Tk5FieldInfoEx> normalFields = tableData.DataList;

        var groupFields = FormatFields(normalFields, pageData[tableData.TableName]?.ControlGroupList);
    }
    <div class="@HtmlCommonUtil.MergeClass("panel-body table-row bg-white-panel", "column" + customData.ColumnCount.ToString())">
        <div class="hide">
            @foreach (var field in hiddenFields)
            {
                @Raw(RenderHidden(provider, field, true))
            }

            @if (tableData.HasEditKey)
            {
                @Raw(HtmlCommonUtil.HiddenKey(tableData, provider, true))
            }
        </div>
        <div class="p10 pull-left w100p">
            @if (groupFields == null)
            {
                @foreach (Tk5FieldInfoEx field in normalFields)
                {
                    HtmlString fieldString = RenderFieldItem(provider, tableData.TableName, field);
                    if (fieldString != null && !string.IsNullOrEmpty(fieldString.Value))
                    {
                        Raw(fieldString.Value);
                    }
                    else
                    {
                        <div class="@HtmlCommonUtil.MergeClass("tk-column form-group", field.LayoutClass())">
                            <dl @dataClass>
                                @if (showCaption)
                                {
                                    <dt>@field.DisplayName</dt>
                                }
                                <dd>
                                    <span class="tk-control">@Raw(field.ControlHtml(provider, true))</span>
                                </dd>
                            </dl>
                        </div>
                    }
                }
            }
            else
            {
                @foreach (var group in groupFields)
                {
                    string collapse = group.Key.IsCollaspe ? string.Empty : "in";
                    string rotate = group.Key.IsCollaspe ? "rotate-180" : string.Empty;
                    <div class="panel panel-default">
                        <div class="panel-heading panel-collapse-trigger" role="tab" id="headingTwo">
                            <h4 class="panel-title">@group.Key.Caption</h4>
                            <i class="trigger-icon fa icon-chevron-down @rotate"></i>
                        </div>
                        <div class="panel-collapse collapse @collapse">
                            <div class="panel-body">
                                @foreach (Tk5FieldInfoEx field in group)
                                {
                                    HtmlString fieldString = RenderFieldItem(provider, tableData.TableName, field);
                                    if (fieldString != null && !string.IsNullOrEmpty(fieldString.Value))
                                    {
                                        Raw(fieldString.Value);
                                    }
                                    else
                                    {
                                        <div class="@HtmlCommonUtil.MergeClass("tk-column form-group", field.LayoutClass())">
                                            <dl @dataClass>
                                                @if (showCaption)
                                                {
                                                    <dt>@field.DisplayName</dt>
                                                }
                                                <dd>
                                                    <span class="tk-control">@Raw(field.ControlHtml(provider, true))</span>
                                                </dd>
                                            </dl>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
    </div>
</div>