@inherits YJC.Toolkit.Razor.ToolkitTemplatePage<TModel>
@using System.Data;
@using System.Collections.Generic;
@using Microsoft.AspNetCore.Html;
@using YJC.Toolkit.Data;
@using YJC.Toolkit.MetaData;
@using YJC.Toolkit.Razor;
@using YJC.Toolkit.Sys;
@using YJC.Toolkit.Web;
@{
    INormalMetaData metaData = ViewBag.MetaData;
    PageInfo page = Model.Info;
    string key = string.Empty;
    string style = OperatorUtil.GetStyle(page.Style);
    //if (style == "update")
    //{
    //    key = "?" + OperatorUtil.AppendKey(metaData, '*');
    //}
}
<template>
    <div ref="current"
         url="/c/xml/@(style)/@(page.Source)@key">
        @foreach (var table in metaData.TableDatas)
        {
            IEnumerable<Tk5FieldInfoEx> normalFields = table.DataList;
            @if (table.ListStyle == TableShowStyle.None)
            {
                List<List<Tk5FieldInfoEx>> showFields = OperatorUtil.Arrange(table);
                int colBase = 24 / table.ColumnCount;
                <el-card header="@Raw(table.TableDesc)">
                    <el-form :model="@table.TableName" label-width="80px">
                        @foreach (var line in showFields)
                        {
                            <el-row>
                                @foreach (var field in line)
                                {
                                    string nickName = field.NickName;
                                    int span = field.Layout.Layout == FieldLayout.PerLine ? 24 : field.Layout.UnitNum * colBase;
                                    if (span > 24)
                                    {
                                        span = 24;
                                    }
                                    <el-col :span="@span">
                                        @Raw(field.VueControlHtml(page.Style, table.TableName, null, true))
                                    </el-col>
                                }
                            </el-row>
                        }
                    </el-form>
                </el-card>
            }
            else if (table.ListStyle == TableShowStyle.Table)
            {
                <el-card :body-style="{ padding: '0' }">
                    <template #header>
                        用户从表
                        <el-button-group style="float:right">
                            <el-button type="primary"
                                       size="mini"
                                       round
                                       @@click="handleAdd('@table.TableName')">新建</el-button>
                            <el-button type="primary"
                                       size="mini"
                                       round
                                       @@click="handleSelectAll('@table.TableName')">全选</el-button>
                            <el-button type="primary"
                                       size="mini"
                                       round
                                       @@click="handleSelectReverse('@table.TableName')">反选</el-button>
                            <el-button type="primary"
                                       size="mini"
                                       round
                                       @@click="handleSelectClear('@table.TableName')">全不选</el-button>
                            <el-button type="primary"
                                       size="mini"
                                       round
                                       @@click="handleDelete('@table.TableName')">删除</el-button>
                            <el-button type="primary"
                                       size="mini"
                                       round
                                       @@click="handleClear('@table.TableName')">全删</el-button>
                            <el-button type="primary"
                                       size="mini"
                                       round
                                       @@click="handleMove('@table.TableName','Up')">上移</el-button>
                            <el-button type="primary"
                                       size="mini"
                                       round
                                       @@click="handleMove('@table.TableName','Down')">下移</el-button>
                            <el-button type="primary"
                                       size="mini"
                                       round
                                       @@click="handleAdd('@table.TableName')">新建</el-button>
                        </el-button-group>
                    </template>
                    <el-table ref="@table.TableName"
                              highlight-current-row
                              :data="@table.TableName"
                              @@current-change="(currentRow,oldCurrentRow)=>handleCurrentChange('@table.TableName',currentRow,oldCurrentRow)"
                              @@selection-change="val=>{handleSelectionChange('@table.TableName',val)}">
                        <el-table-column type="selection"
                                         align="center"
                                         width="55">
                        </el-table-column>
                        @foreach (var field in normalFields)
                        {
                            <el-table-column label="@Raw(field.DisplayName)"
                                             prop="@(field.NickName)">
                                <el-input slot-scope="{row}"
                                          size="medium"
                                          v-model="row.@(field.NickName)"
                                          placeholder="@Raw(field.DisplayName)">
                                </el-input>
                                @*@Raw(field.VueControlHtml(page.Style, table.TableName, null, false))*@
                            </el-table-column>
                        }
                    </el-table>
                </el-card>
            }
            <el-divider></el-divider>
        }
    </div>
</template>
<script>
    import editMixin from 'common/mixins/edit'
    export default {
        mixins: [editMixin],
        mounted() {
            this.tableTemplete = @Raw(OperatorUtil.GetInitJson(metaData))
        }
    }
</script>