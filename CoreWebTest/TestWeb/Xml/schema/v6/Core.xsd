<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XMLSpy v2010 (http://www.altova.com) by cjy (baison) -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified" attributeFormDefault="unqualified">
  <xs:attributeGroup name="TrimAttrGrp">
    <xs:attribute name="AutoTrim" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>自动清除读取值两边的空格，默认为false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="SimpleAttrGrp">
    <xs:attribute name="UseSourceType" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Json输出时，是否使用对应的类型。默认为false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attributeGroup ref="TrimAttrGrp"/>
  </xs:attributeGroup>
  <xs:attributeGroup name="OrderAttrGrp">
    <xs:attribute name="Order" type="xs:unsignedInt">
      <xs:annotation>
        <xs:documentation>节点的输出顺序。按照以小到大的顺序进行排序</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="MultipleAttrGrp">
    <xs:attribute name="CollectionType" type="xs:string">
      <xs:annotation>
        <xs:documentation>集合对象的对应类型，需要使用.net类型的AssemblyQualifiedName对应的值。默认不需要输入，以对应Property的类型作为CollectionType，并以第一个泛型参数的类型作为ObjectType。</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="IsMultipleAttrGrp">
    <xs:attribute name="IsMultiple" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>Xml或者Json是否是多个元素。默认为false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="ConstructorAttrGrp">
    <xs:attribute name="UseConstructor" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>分析的类型如果没有默认构造函数，那么需要将其设置为true。默认为false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:attributeGroup name="FactoryAttrGrp">
    <xs:attribute name="FactoryName" type="xs:Name" use="required">
      <xs:annotation>
        <xs:documentation>配置插件工厂的注册名</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>
  <xs:element name="Toolkit">
    <xs:annotation>
      <xs:documentation>Comment describing your root element</xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Type">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Attribute" type="BaseNamedType" minOccurs="0" maxOccurs="unbounded"/>
              <xs:choice minOccurs="0">
                <xs:element name="Content" type="ContentType"/>
                <xs:element ref="Element"/>
              </xs:choice>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="Element">
    <xs:complexType>
      <xs:choice maxOccurs="unbounded">
        <xs:element name="SimpleElement" type="ElementType"/>
        <xs:element name="ObjectElement" type="ObjectElementType"/>
        <xs:element name="TagElement" type="TagElementType"/>
        <xs:element name="SimpleComplexElement" type="ElementType"/>
        <xs:element name="Dictionary" type="DictionaryType"/>
        <xs:element name="ObjectDictionary" type="ObjectDictionaryType"/>
        <xs:element name="DynamicElement" type="DynamicElementType"/>
        <xs:element name="DynamicDictionary" type="DynamicDictionaryType"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>
  <xs:element name="Name">
    <xs:complexType>
      <xs:attribute name="Name" type="xs:Name" use="required">
        <xs:annotation>
          <xs:documentation>模式的名字</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="NamingRule">
        <xs:annotation>
          <xs:documentation>命名规则，按照这个规则对PropertyName求取对应的名字。默认为Pascal</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="Pascal"/>
            <xs:enumeration value="Camel"/>
            <xs:enumeration value="Snake"/>
            <xs:enumeration value="Kebab"/>
            <xs:enumeration value="Upper"/>
            <xs:enumeration value="Lower"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="ForceName" type="xs:Name">
        <xs:annotation>
          <xs:documentation>强制的名字，定义此属性将忽略NamingRule</xs:documentation>
        </xs:annotation>
      </xs:attribute>
      <xs:attribute name="NamespaceType">
        <xs:annotation>
          <xs:documentation>Xml模式下，定义Namespace的类型。默认为None</xs:documentation>
        </xs:annotation>
        <xs:simpleType>
          <xs:restriction base="xs:NMTOKEN">
            <xs:enumeration value="None"/>
            <xs:enumeration value="Toolkit"/>
            <xs:enumeration value="Namespace"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="NamespaceUri" type="xs:anyURI">
        <xs:annotation>
          <xs:documentation>NamespaceType设定为Namespace时，需要制定对应的Uri值</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>
  <xs:complexType name="BaseObjectType">
    <xs:attribute name="PropertyName" type="xs:Name" use="required">
      <xs:annotation>
        <xs:documentation>属性名，需要和类型中的属性对应</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="HasConverter" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>是否配置了TypeConverter。默认为false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ReadWriteMode">
      <xs:annotation>
        <xs:documentation>属性读写类型。默认为ReadWrite</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:NMTOKEN">
          <xs:enumeration value="ReadWrite"/>
          <xs:enumeration value="ReadOnly"/>
          <xs:enumeration value="WriteOnly"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="Required" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>是否必须输入。默认为false</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ObjectType" type="xs:string">
      <xs:annotation>
        <xs:documentation>对象的对应类型，需要使用.net类型的AssemblyQualifiedName对应的值。默认不需要输入，以对应Property的类型作为ObjectType。</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="DefaultValue" type="xs:string">
      <xs:annotation>
        <xs:documentation>缺省值</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>
  <xs:complexType name="ContentType">
    <xs:complexContent>
      <xs:extension base="BaseObjectType">
        <xs:attributeGroup ref="SimpleAttrGrp"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="BaseNamedType">
    <xs:complexContent>
      <xs:extension base="BaseObjectType">
        <xs:sequence>
          <xs:element ref="Name" minOccurs="0" maxOccurs="unbounded"/>
        </xs:sequence>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="AttributeType">
    <xs:complexContent>
      <xs:extension base="BaseNamedType">
        <xs:attributeGroup ref="SimpleAttrGrp"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ElementType">
    <xs:complexContent>
      <xs:extension base="BaseNamedType">
        <xs:attributeGroup ref="SimpleAttrGrp"/>
        <xs:attributeGroup ref="MultipleAttrGrp"/>
        <xs:attributeGroup ref="OrderAttrGrp"/>
        <xs:attributeGroup ref="IsMultipleAttrGrp"/>
        <xs:attribute name="UseCData" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>Xml的数据内容用<![CDATA[ ]]>输出。默认为false</xs:documentation>
          </xs:annotation>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ObjectElementType">
    <xs:complexContent>
      <xs:extension base="ElementType">
        <xs:attributeGroup ref="ConstructorAttrGrp"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="TagElementType">
    <xs:complexContent>
      <xs:extension base="BaseNamedType">
        <xs:attributeGroup ref="OrderAttrGrp"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="BaseDictionaryType">
    <xs:complexContent>
      <xs:extension base="BaseNamedType">
        <xs:attributeGroup ref="MultipleAttrGrp"/>
        <xs:attributeGroup ref="OrderAttrGrp"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="DictionaryType">
    <xs:complexContent>
      <xs:extension base="BaseDictionaryType">
        <xs:attributeGroup ref="TrimAttrGrp"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="ObjectDictionaryType">
    <xs:complexContent>
      <xs:extension base="BaseDictionaryType">
        <xs:attributeGroup ref="ConstructorAttrGrp"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="DynamicElementType">
    <xs:complexContent>
      <xs:extension base="BaseObjectType">
        <xs:attributeGroup ref="MultipleAttrGrp"/>
        <xs:attributeGroup ref="FactoryAttrGrp"/>
        <xs:attributeGroup ref="OrderAttrGrp"/>
        <xs:attributeGroup ref="IsMultipleAttrGrp"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
  <xs:complexType name="DynamicDictionaryType">
    <xs:complexContent>
      <xs:extension base="BaseDictionaryType">
        <xs:attributeGroup ref="FactoryAttrGrp"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>
</xs:schema>
