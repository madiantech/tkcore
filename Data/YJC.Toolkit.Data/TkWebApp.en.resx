<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BaseMobileCMsg" xml:space="preserve">
    <value>[{0}]'s value is not a valid phone number of {1}, please fill in the correct number!</value>
  </data>
  <data name="ChinaMobile" xml:space="preserve">
    <value>China Mobile</value>
  </data>
  <data name="ChinaTelcom" xml:space="preserve">
    <value>China Telcom</value>
  </data>
  <data name="ChinaUnicom" xml:space="preserve">
    <value>China Unicom</value>
  </data>
  <data name="ConstraintError" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="CurrentDateCMsg" xml:space="preserve">
    <value>'s value should not be later than the current date!</value>
    <comment>DisplayName + </comment>
  </data>
  <data name="DateAfterCMsg" xml:space="preserve">
    <value>[{0}]'s value should be after [{1}]'s value!</value>
  </data>
  <data name="DateCMsg" xml:space="preserve">
    <value>'s value must be a date type!</value>
    <comment>displayName +</comment>
  </data>
  <data name="DeleteStyle" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="DetailStyle" xml:space="preserve">
    <value>Detail</value>
  </data>
  <data name="DisableStyleErrorTitle" xml:space="preserve">
    <value>The function is disabled !</value>
  </data>
  <data name="DisableStyleFunction" xml:space="preserve">
    <value>The {0} function of the module is disabled !</value>
  </data>
  <data name="DisableStylePageTitle" xml:space="preserve">
    <value>Invalid Operation</value>
  </data>
  <data name="DoubleCMsg" xml:space="preserve">
    <value>'s value should be a double type!</value>
    <comment>displayName +</comment>
  </data>
  <data name="EasySearchNotExist" xml:space="preserve">
    <value>'s value isn't exsit</value>
    <comment>DisplayName +</comment>
  </data>
  <data name="EasySearchVariousTwo" xml:space="preserve">
    <value>'s value is ambiguous, don't directly enter the name, just select the appropriate item.</value>
    <comment>DisplayName +</comment>
  </data>
  <data name="EmailCMsg" xml:space="preserve">
    <value>'s value is not the valid email address, please fill in the correct!</value>
    <comment>displayName +</comment>
  </data>
  <data name="FixLengthCMsg" xml:space="preserve">
    <value>The length of the [{0}]'s value should be equal to {1}</value>
  </data>
  <data name="InsertStyle" xml:space="preserve">
    <value>Insert</value>
  </data>
  <data name="IntCMsg" xml:space="preserve">
    <value>'s value should be an integer type!</value>
    <comment>displayName +</comment>
  </data>
  <data name="ListStyle" xml:space="preserve">
    <value>List</value>
  </data>
  <data name="MobileCName" xml:space="preserve">
    <value>Mobile</value>
  </data>
  <data name="MultipleNotEmptyCMsg" xml:space="preserve">
    <value> can not be emtpy!</value>
  </data>
  <data name="NoDataRightBody" xml:space="preserve">
    <value>You do not have the permission to access this data!</value>
  </data>
  <data name="NoDataRightTitle" xml:space="preserve">
    <value>Permission denied!</value>
  </data>
  <data name="NoFunctionRightBody" xml:space="preserve">
    <value>Sorry, your permission is not enough, you can not use the function.</value>
  </data>
  <data name="NoFunctionRightTitle" xml:space="preserve">
    <value>Permission denied!</value>
  </data>
  <data name="NotEmptyCMsg" xml:space="preserve">
    <value>'s value should not be empty!</value>
    <comment>displayName +</comment>
  </data>
  <data name="PostCodeCMsg" xml:space="preserve">
    <value>'s value isnot a valid postal code, please fill in the correct!</value>
    <comment>displayName +</comment>
  </data>
  <data name="RangeCBetween" xml:space="preserve">
    <value>[{0}]'s value should be between {1} and {2}!</value>
  </data>
  <data name="RangeCGreat" xml:space="preserve">
    <value>[{0}]'s value should be larger than {1}!</value>
  </data>
  <data name="RangeCLow" xml:space="preserve">
    <value>[{0}]'s value should be smaller than {1}!</value>
  </data>
  <data name="SFZCMsg" xml:space="preserve">
    <value>'s value isn't a valid ID No. , please fill in the correct No.!</value>
    <comment>displayName +</comment>
  </data>
  <data name="SingleValueCMsg" xml:space="preserve">
    <value>'s value is not a unique value in the data table!</value>
    <comment>displayName +</comment>
  </data>
  <data name="StringLengthCMsg" xml:space="preserve">
    <value>The length of [{0}]'s value should not be longer than {1}!</value>
  </data>
  <data name="Today" xml:space="preserve">
    <value>Today</value>
  </data>
  <data name="Tomorrow" xml:space="preserve">
    <value>Tomorrow</value>
  </data>
  <data name="UniqueRowCMsg" xml:space="preserve">
    <value>[{0}]'s value in this row is the same in the {1} line !</value>
  </data>
  <data name="UpdateStyle" xml:space="preserve">
    <value>Update</value>
  </data>
  <data name="Yesterday" xml:space="preserve">
    <value>Yesterday</value>
  </data>
</root>