@inherits YJC.Toolkit.Razor.NormalObjectListTemplate
@using System.Data;
@using YJC.Toolkit.Data;
@using YJC.Toolkit.MetaData;
@using YJC.Toolkit.Razor;
@using YJC.Toolkit.Sys;
@using YJC.Toolkit.Web;
@{
    ObjectListModel model = (ObjectListModel)Model;
    CountInfo countRow = model.Count;
    ListSortInfo sortRow = model.Sort;
    int sortField = sortRow.SortField;
    string tableName = ViewBag.MetaData.Table.TableName;
    
    IEnumerable<ObjectContainer> dataTable = model.List;
    UrlInfo urlInfo = model.CallerInfo.URL;
    string url = urlInfo.DSelfUrl;
    PageInfo pageInfo = model.CallerInfo.Info;
    
    string condition = HttpUtility.UrlEncode(sortRow.SqlCon);
    IEnumerable<IFieldInfoEx> fields = ViewBag.MetaData.Table.TableList;
    NormalListData pageData = (NormalListData)ViewBag.PageData;
    IFieldValueProvider provider = null;
}
@functions {
    string OperatorWidth(int width)
    {
        if (width > 0)
            return "width=\"" + width + "\"";
        return string.Empty;
    }

    string CreateColAttrs(IFieldInfoEx field, int index, int sortField)
    {
        Tk5FieldInfoEx tk5Field = field.Convert<Tk5FieldInfoEx>();
        HtmlAttributeBuilder builder = new HtmlAttributeBuilder();
        if (tk5Field.ListDetail != null && tk5Field.ListDetail.ListWidth > 0)
            builder.Add("width", tk5Field.ListDetail.ListWidth);
        if (index == sortField)
            builder.Add((HtmlAttribute)"selected");
        return builder.CreateAttribute();
    }

    string CreateHeadAttrs(IFieldInfoEx field, int index, int sortField, ListSortInfo sortRow)
    {
        HtmlAttributeBuilder builder = new HtmlAttributeBuilder();
        Tk5FieldInfoEx tk5Field = field.Convert<Tk5FieldInfoEx>();
        builder.Add("class", "text-left text-nowrap");
        //if (tk5Field.DataType == TkDataType.Text || (tk5Field.ListDetail != null && tk5Field.ListDetail.TextHead))
        //{
        //    builder.Add("class", "text-left text-nowrap");
        //}
        //else
        //{
        //    builder.Add("data-sort", index.ToString());
        //    string order = sortRow.Order;
        //    string sortClass = string.Empty;
        //    if (index == sortField)
        //    {
        //        order = order == "DESC" ? "ASC" : "DESC";
        //        sortClass = "sort-" + order;
        //    }
        //    builder.Add("data-order", order);
        //    builder.Add("class", HtmlUtil.MergeClass("text-left text-nowrap", sortClass.ToLower()));
        //}

        return builder.CreateAttribute();
    }
}
@section DefaultListHeader {
    <tr>
        @if (pageData.OperatorPosition == OperatorPosition.Left)
        {
            <th class="text-center text-nowrap">
                <div>@pageData.OperationCaption</div>
            </th>
        }
        @{
            int index = 0;
        }
        @foreach (IFieldInfoEx field in fields)
        {
            <th @CreateHeadAttrs(field, index++, sortField, sortRow)>
                <div>@field.DisplayName</div>
            </th>
        }
        @if (pageData.OperatorPosition == OperatorPosition.Right)
        {
            <th class="text-center text-nowrap">
                <div>@pageData.OperationCaption</div>
            </th>
        }
    </tr>
}
@section DefaultListWidth {
    @if (pageData.OperatorPosition == OperatorPosition.Left)
    {
        <col @OperatorWidth(pageData.OperatorWidth) />
    }
    @{
        int index = 0;
    }
    @foreach (IFieldInfoEx field in fields)
    {
        <col @CreateColAttrs(field, index++, sortField) />
    }
    @if (pageData.OperatorPosition == OperatorPosition.Right)
    {
        <col @OperatorWidth(pageData.OperatorWidth) />
    }
}
@section DefaultTabSheet {
    @*@if (BootcssUtil.HasTabSheet(dataSet)) {
        <ul class="@HtmlUtil.MergeClass("nav", BootcssUtil.GetTabClass(pageData.TabDisplayType))" role="tablist">
            @BootcssUtil.CreateTabSheets(dataSet)
        </ul>
    }*@
}
@RenderSectionOrDefault("TabSheet", "DefaultTabSheet")
<table class="@HtmlUtil.MergeClass("list-table table", pageData.Display.TableDisplayClass())">
    <colgroup>
        @RenderSectionOrDefault("ListWidth", "DefaultListWidth")
    </colgroup>
    @if (pageData.ShowListHeader)
    {
        <thead>
            @RenderSectionOrDefault("ListHeader", "DefaultListHeader")
        </thead>
    }
    <tbody id="pageList" data-totalcount="@countRow.TotalCount" data-totalpage="@countRow.TotalPage" data-sort="@sortField" data-order="@sortRow.Order" data-page="@countRow.CurrentPage" data-url="@url" data-condition="@condition" data-source="@pageInfo.Source" @*data-tab="@HtmlUtil.GetSelectedTab(dataSet)"*@>
        @if(dataTable != null) {
        @foreach (ObjectContainer row in dataTable)
        {
            @{
                string rowString = @RenderRow(row);
            }
            if (rowString != null)
            {
            @rowString
            }
            else 
            {
                @{
                provider = CreateProvider(row, null);
                }
            <tr>
                @if(pageData.OperatorPosition == OperatorPosition.Left)
                {
                    <td class="text-nowrap text-center">@BootcssUtil.CreateRowOperators(model.RowOperators, row)</td>
                }
                @foreach (IFieldInfoEx field in fields)
                {
                    @{ 
                        Tk5FieldInfoEx fieldInfo = field.Convert<Tk5FieldInfoEx>(); 
                        string fieldString = @RenderFieldItem(row, fieldInfo);
                    }
                    if (fieldString == null)
                    {
                    <td>@fieldInfo.DisplayValue(provider)</td>
                    }
                    else
                    {
                    @fieldString
                    }
                }
                @if(pageData.OperatorPosition == OperatorPosition.Right)
                {
                    <td class="text-nowrap text-center">@BootcssUtil.CreateRowOperators(model.RowOperators, row)</td>
                }
            </tr>
            }
        }
        }
    </tbody>
</table>
@if (countRow.TotalCount == 0)
{
    <div class="p30">@pageData.NoDataCaption</div>
}
else
{
    @if (@pageData.ShowPage)
    {
        @*RenderLayoutPartial("pagenumber.cshtml", Model)*@
    }
}
