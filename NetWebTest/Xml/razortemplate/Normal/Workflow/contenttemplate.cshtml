@inherits YJC.Toolkit.Razor.BaseToolkit2Template
@using System.Data;
@using System.Collections.Generic;
@using System.Linq;
@using YJC.Toolkit.Data;
@using YJC.Toolkit.MetaData;
@using YJC.Toolkit.Razor;
@using YJC.Toolkit.Sys;
@using YJC.Toolkit.Web;
@{
    NormalDetailData pageData = ViewBag.PageData;
    IMultiEditModel model = CreateModel<IMultiEditModel>(Model);

    INormalMetaData metaData = ViewBag.MetaData;
    var normalMeta = from item in metaData.TableDatas
                     where item.ListStyle == TableShowStyle.None
                     select item;
    var listMeta = (from item in metaData.TableDatas
                    where item.ListStyle != TableShowStyle.None
                    select item).ToArray();
    int captionCol = pageData.CaptionColumn;
    int dataCol = pageData.DataColumn;
    bool showHint = pageData.AppendHint;
    bool ignoreEmptyField = pageData.IgnoreEmptyField;
}
@functions {
    string CreateColAttrs(IFieldInfoEx field)
    {
        Tk5FieldInfoEx tk5Field = field.Convert<Tk5FieldInfoEx>();
        if (tk5Field.ListDetail != null && tk5Field.ListDetail.ListWidth > 0)
        {
            HtmlAttributeBuilder builder = new HtmlAttributeBuilder();
            builder.Add("width", tk5Field.ListDetail.ListWidth);
            return builder.CreateAttribute();
        }
        return string.Empty;
    }

    string CreateHeadAttrs(IFieldInfoEx field)
    {
        HtmlAttributeBuilder builder = new HtmlAttributeBuilder();
        Tk5FieldInfoEx tk5Field = field.Convert<Tk5FieldInfoEx>();
        Alignment titleAlign = tk5Field.Extension != null ? tk5Field.Extension.TitleAlign : Alignment.Left;
        builder.Add("class", HtmlCommonUtil.MergeClass("text-nowrap", titleAlign.AlginClass()));
        return builder.CreateAttribute();
    }
}
<form method="POST" id="DetailForm" class="tk-dataform form-horizontal p5 mb15" role="form">
    @foreach (INormalTableData tableData in normalMeta)
    {
        @{
        var normalFields = tableData.DataList;
        IFieldValueProvider provider = model.CreateMainObjectProvider(tableData);
        }
        <div class="panel panel-info tk-datatable">
            <div class="panel-heading">
                <h3 class="panel-title">@tableData.TableDesc</h3>
            </div>
            <div class="@HtmlUtil.MergeClass("panel-body table-row", "column" + tableData.ColumnCount.ToString())">
                <div class="p10">
                    @foreach (Tk5FieldInfoEx field in normalFields)
                    {
                        @{
                        string fieldString = RenderFieldItem(provider, field);
                        string value = provider[field.NickName].ToString();
                        }
                        if (fieldString != null)
                        {
                            @fieldString
                        }
                        else
                        {
                            @if (ignoreEmptyField && string.IsNullOrEmpty(value))
                            {
                                continue;
                            }
                            <div class="@HtmlUtil.MergeClass("tk-column", field.LayoutClass(), "pt10")">
                                <dl>
                                    <dt>@field.DisplayName</dt>
                                    <dd>
                                        <span class="tk-control">
                                            @field.Detail(provider, showHint, false)
                                        </span>
                                    </dd>
                                </dl>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    }
    @if (listMeta.Length > 0)
    {
        <div>
            <!-- Nav tabs -->
            <ul class="nav nav-tabs" role="tablist">
                @{
        int index = 0;
                }
                @foreach (var tableData in listMeta)
                {
                    @{
                    string classValue;
                    if (index++ == 0)
                    {
                        classValue = "active";
                    }
                    else
                    {
                        classValue = string.Empty;
                    }
                    string name = tableData.TableName + "Tab";
                    }
                    <li role="presentation" class="@classValue"><a href="@('#'+ name)" aria-controls="@name" role="tab" data-toggle="tab">@tableData.TableDesc</a></li>
                }
            </ul>
            <!-- Tab panes -->
            <div class="tab-content">
                @{
        int index2 = 0;
                }
                @foreach (var tableData in listMeta)
                {
                    @{
                    string classValue2;
                    if (index2++ == 0)
                    {
                        classValue2 = "active";
                    }
                    else
                    {
                        classValue2 = string.Empty;
                    }
                    string name2 = tableData.TableName + "Tab";
                    IEnumerable<IFieldInfoEx> fields = tableData.DataList;
                    IEnumerable<IFieldValueProvider> rows = model.CreateDataRowsProvider(tableData);
                    }
                    <div role="tabpanel" class="@HtmlCommonUtil.MergeClass("tab-pane", classValue2)" id="@name2">
                        <table class="list-table table">
                            <colgroup>
                                @foreach (IFieldInfoEx field in fields)
                                {
                                    <col @CreateColAttrs(field) />
                                }
                            </colgroup>
                            <thead>
                                <tr>
                                    @foreach (IFieldInfoEx field in fields)
                                    {
                                        <th @CreateHeadAttrs(field)>@field.DisplayName</th>
                                    }
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var row in rows)
                                {
                                    <tr>
                                        @foreach (IFieldInfoEx field in fields)
                                        {
                                            @{
                                            Tk5FieldInfoEx fieldInfo = field.Convert<Tk5FieldInfoEx>();
                                            string alignClass = string.Empty;
                                            Alignment align = Alignment.Left;
                                            if (fieldInfo.Extension != null)
                                            {
                                                align = fieldInfo.Extension.Align;
                                            }
                                            alignClass = align.AlginClass();
                                            }
                                            <td class="@alignClass">@fieldInfo.DisplayValue(row)</td>
                                        }
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    }
</form>